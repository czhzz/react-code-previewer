{"version":3,"sources":["../../components/md-node-types/html-block.js"],"names":["React","PureComponent","PropTypes","cls","HtmlBlock","console","log","props","value","children","includes","nodeValue","replace","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CACA;;IAEMC,S;;;;;;;;;;;;;;iEACS,YAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,MAAKC,KAAvC;AADiB,wBAEW,MAAKA,KAFhB;AAAA,UAETC,KAFS,eAETA,KAFS;AAAA,UAEFC,QAFE,eAEFA,QAFE;;AAGjB,UAAID,KAAK,CAACE,QAAN,CAAe,IAAf,CAAJ,EAA0B;AACxB,YAAIC,SAAS,GAAGH,KAAK,CAACI,OAAN,CAAc,WAAd,EAA2B,EAA3B,CAAhB,CADwB,CAExB;;AACA,YAAID,SAAS,KAAK,EAAlB,EAAsB;AACpB,iBAAOH,KAAP;AACD,SALuB,CAOxB;;;AACA,eACE;AAAI,UAAA,EAAE,EAAEG,SAAR;AAAmB,UAAA,SAAS,EAAC;AAA7B,WACE;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAyBA,SAAzB,CADF,EAEE;AAAG,UAAA,IAAI,QAAMA;AAAb,eAFF,CADF;AAMD,OAdD,MAcO;AACLN,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,KAAK,CAACI,OAAN,CAAc,GAAd,CAA3B,EADK,CAGL;;AACA,eAAO,0CAAGJ,KAAH,CAAP;AACD;AACF,K;;;;;;;SACDK,M,GAAA,kBAAS;AACPR,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKC,KAAvC;AADO,uBAEqB,KAAKA,KAF1B;AAAA,QAECC,KAFD,gBAECA,KAFD;AAAA,QAEQC,QAFR,gBAEQA,QAFR;AAGP,WAAO,0CAAGA,QAAH,CAAP;AACD,G;;;EA7BqBR,a;;AAgCxB,eAAeG,SAAf","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cls from \"classnames\";\n// import ReactHtmlParser from \"react-html-parser\";\n\nclass HtmlBlock extends PureComponent {\n  renderHtml = () => {\n    console.log(\"--- this.props ---\", this.props);\n    const { value, children } = this.props;\n    if (value.includes(\"h2\")) {\n      let nodeValue = value.replace(/<[^<>]+>/g, \"\");\n      //如果节点内容为空，就什么也不做\n      if (nodeValue === \"\") {\n        return value;\n      }\n\n      //如果节点内容不为空，就解析成可链接的 h2 标签\n      return (\n        <h2 id={nodeValue} className=\"h2-link-container\">\n          <span className=\"title\">{nodeValue}</span>\n          <a href={`#${nodeValue}`}>#</a>\n        </h2>\n      );\n    } else {\n      console.log(\"encodeURI()\", value.replace(\"<\"));\n\n      //如果不是 <html></html> 节点 ，那么就是其他的 html 类型节点，我们转换成 html 节点再返回\n      return <>{value}</>;\n    }\n  };\n  render() {\n    console.log(\"--- this.props ---\", this.props);\n    const { value, children } = this.props;\n    return <>{children}</>;\n  }\n}\n\nexport default HtmlBlock;\n"],"file":"html-block.js"}